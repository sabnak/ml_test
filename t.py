"""
Задание такое будет:
1. Всего играет P игроков.
2. Каждый игрок придумывает W слов.
3. Игра длится R раундов, пока не останется одно слово. В каждом раунде выбывает половина слов. 
4. В каждом раунде все слова случайными образом разбираются на G пар.
5. В каждом раунде игрок распределяет P баллов между C словами. Не больше M_P на слово. Своим словам можно распределять баллы только в случае, если в паре только слова игрока, распределяющего баллы.

Баллы определяют вероятность победы слова в каждой паре: больше баллов - выше вероятность.

В следующий раунд выходят слова, победившие в своих парах.

M_P должно вычисляться по справедливой формуле для каждого раунда (меньше слов - меньше баллов).

Количество игроков (P), начальных слов для каждого игрока (W), а так же количество баллов, которые можно распределить в первом раунде, должны быть полностью настраиваемыми.
Для каждого из этих параметров предусмотреть значения по умолчанию. Количество слов (W) должно корректно высчитываться в зависимости от количества игроков (P), в случае если оно не передано.
Если количество слов не является степенью 2 - бросить исключение.

Перед игрой, после выбора игроками слов, должен быть создан CSV-файл со списком слов каждого игрока.
После каждого раунда должен создаваться CSV-файл, в котором были бы результаты раунда. Столбцы следующие:
 НОМЕР ГРУППЫ
 СОСТАВ ГРУППЫ
 ГОЛОСОВАНИЕ
 ПОБЕДИТЕЛЬ 
Содержимое ячеек:
 СОСТАВ ГРУППЫ: СЛОВО_1 (АВТОР) : %ПОБЕДИТЬ vs %ПОБЕДИТЬ: СЛОВО_2(АВТОР) 
 ГОЛОСОВАНИЕ: СЛОВО_1 (ИГРОК_2: БАЛ, ИГРОК_P: БАЛ)
 ПОБЕДИТЕЛЬ (СЛОВО_1 (АВТОР))

По окончании игры, необходимо упаковать все CSV-файлы в архив и отправить их на почту yithiann@gmail.com

Давай введём параметр, который, если он установлен в True, будет указывать, что в таких случаях надо у случайных игроков убрать случайные слова, чтобы сумма всех слов в итоге дала степень 2. Слова убрать максимально равномерно у всех игроков.

А если False, то кидается исключение.
"""
import random
import string
from math import log

players_quantity = 3
words_quantity = 6

if players_quantity is None:
	players_quantity = random.randint(3, 5)

if words_quantity is None:
	words_quantity = random.randint(3, 5)


def generate_player():
	player_name = (''.join(random.sample(string.ascii_uppercase, random.choice(range(3, 5))))).capitalize()
	return player_name


def generate_word():
	word = ''.join(random.sample(string.ascii_lowercase, random.choice(range(3, 5))))
	return (word)


sum_words = players_quantity * words_quantity

players = {
	generate_player(): {
		"full_words_list": [generate_word() for _ in range(words_quantity)]
	} for _ in range(players_quantity)
}

for player in players.values():
	if log(sum_words, 2).is_integer():
		break
	player["full_words_list"].pop()
	sum_words -= 1

print(players)

